// This file was generated by counterfeiter
package fakes

import "sync"

type Mounter struct {
	IdempotentlyMountStub        func(source, target string) error
	idempotentlyMountMutex       sync.RWMutex
	idempotentlyMountArgsForCall []struct {
		source string
		target string
	}
	idempotentlyMountReturns struct {
		result1 error
	}
	RemoveMountStub        func(target string) error
	removeMountMutex       sync.RWMutex
	removeMountArgsForCall []struct {
		target string
	}
	removeMountReturns struct {
		result1 error
	}
}

func (fake *Mounter) IdempotentlyMount(source string, target string) error {
	fake.idempotentlyMountMutex.Lock()
	fake.idempotentlyMountArgsForCall = append(fake.idempotentlyMountArgsForCall, struct {
		source string
		target string
	}{source, target})
	fake.idempotentlyMountMutex.Unlock()
	if fake.IdempotentlyMountStub != nil {
		return fake.IdempotentlyMountStub(source, target)
	} else {
		return fake.idempotentlyMountReturns.result1
	}
}

func (fake *Mounter) IdempotentlyMountCallCount() int {
	fake.idempotentlyMountMutex.RLock()
	defer fake.idempotentlyMountMutex.RUnlock()
	return len(fake.idempotentlyMountArgsForCall)
}

func (fake *Mounter) IdempotentlyMountArgsForCall(i int) (string, string) {
	fake.idempotentlyMountMutex.RLock()
	defer fake.idempotentlyMountMutex.RUnlock()
	return fake.idempotentlyMountArgsForCall[i].source, fake.idempotentlyMountArgsForCall[i].target
}

func (fake *Mounter) IdempotentlyMountReturns(result1 error) {
	fake.IdempotentlyMountStub = nil
	fake.idempotentlyMountReturns = struct {
		result1 error
	}{result1}
}

func (fake *Mounter) RemoveMount(target string) error {
	fake.removeMountMutex.Lock()
	fake.removeMountArgsForCall = append(fake.removeMountArgsForCall, struct {
		target string
	}{target})
	fake.removeMountMutex.Unlock()
	if fake.RemoveMountStub != nil {
		return fake.RemoveMountStub(target)
	} else {
		return fake.removeMountReturns.result1
	}
}

func (fake *Mounter) RemoveMountCallCount() int {
	fake.removeMountMutex.RLock()
	defer fake.removeMountMutex.RUnlock()
	return len(fake.removeMountArgsForCall)
}

func (fake *Mounter) RemoveMountArgsForCall(i int) string {
	fake.removeMountMutex.RLock()
	defer fake.removeMountMutex.RUnlock()
	return fake.removeMountArgsForCall[i].target
}

func (fake *Mounter) RemoveMountReturns(result1 error) {
	fake.RemoveMountStub = nil
	fake.removeMountReturns = struct {
		result1 error
	}{result1}
}
